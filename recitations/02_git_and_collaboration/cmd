#################################################################################################################
# When using Git, I typically follow these sequences of steps.                                                  #
# This is coming from my personal experience, and I do not claim it's the best way to use Git.                  #
# I have developed this practice and it helps me avoid common issues like merge conflicts, or unclean commits   #
#################################################################################################################

# Checkout a project 
# I prefer using SSH keys instead of passwords. Tutorial: https://devconnected.com/how-to-generate-git-ssh-keys/

$ git clone git@github.com:ckaestne/seai.git

###

# Setting up credentials 
# I prefer using local configuration over global as it keeps things cleaner. 
# Local configuration is valid only within the repository

$ git config user.name "Kartik Iyer"
$ git config user.email "kartikri@andrew.cmu.edu"

###

# Check the current branch that you are working on. 
# When using branches, it is easy to lose track of working branch.
# IDEs typically show the working branch somewhere, and Terminals can be configured to show them too.  

$ git branch 

###

# Check the status of your repository regularly
# Keep track of which files have been modified/added/removed from the repository
# Also shows staged and unstaged files 
# I use this command as much as I hit Ctrl + S

$ git status

### 

# Create a local branch 
# Typically, I create a new branch per feature. 
# Initially I used the GUI to do this, but using the command is also quite easy. 
# Always make sure to check which branch you are working on, as this command forks from it. 

$ git switch master
$ git checkout -b recitation2

# This ensures that I am forking 'recitation2' from 'master'.
# Using -b also handles creation of remote branch at the time of push. 

###

# .gitignore is your friend. DO NOT forget about it. 

### 

# When I am ready to commit files, I always follow this sequence: 

# Check repo status
$ git status 

# Go over changes made to every file using git diff
# Ideally, you would make changes to only a few files per commit. If there are too many files having genuine changes, then maybe the commit is too big. 

$ git diff fizzbuzz.py

# In case of accidental change, revert the file using git checkout
# Checkout discards all changes made, and reverts the file back to the state at the previous commit
$ git checkout fizzbuzz.py 

# Stage all remaining files 
$ git add -A 

OR 

# Stage files one by one
$ git add fizzbuzz.py

# Commit with a message 
$ git commit -m "This is a message" -m "This is another message"


### 

# Pushing commits to remote 
# After a commit, always pull from remote to sync branch with target
# I like to explicitly specify the branch. I have been burnt in the past for not checking what my default origin was. 

$ git pull origin master 

# Same idea for the push
$ git push origin recitation2

### 

# Once pushed, I use the GUI to raise my pull request, and also cross-validate the delta on it before raising it. 
# Once the pull request is merged, I ensure that I delete the branch. 

### 